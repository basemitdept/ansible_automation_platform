services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ansible_automation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ansible_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ansible_automation"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ansible_user
      RABBITMQ_DEFAULT_PASS: ansible_password
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ansible_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build: ./backend
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://ansible_user:ansible_password@postgres:5432/ansible_automation
      FLASK_ENV: development
      ANSIBLE_SSH_USER: ansible
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ansible_user
      RABBITMQ_PASS: ansible_password
      RABBITMQ_VHOST: /
    volumes:
      - ./playbooks:/app/playbooks
      - ./backend:/app
    ports:
      - "5003:5000"
    networks:
      - ansible_network
    restart: unless-stopped

  frontend:
    build: ./frontend
    depends_on:
      - backend
    environment:
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
      - WDS_SOCKET_HOST=localhost
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - ansible_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - ansible_network
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  ansible_network:
    driver: bridge 
